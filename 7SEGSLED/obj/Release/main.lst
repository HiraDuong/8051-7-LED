                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mask
                                     12 	.globl _main
                                     13 	.globl _EXT1_Process
                                     14 	.globl _EXT0_Process
                                     15 	.globl _display_number
                                     16 	.globl _output_7seg
                                     17 	.globl _output_7seg_off
                                     18 	.globl _init
                                     19 	.globl _delay
                                     20 	.globl _CY
                                     21 	.globl _AC
                                     22 	.globl _F0
                                     23 	.globl _RS1
                                     24 	.globl _RS0
                                     25 	.globl _OV
                                     26 	.globl _F1
                                     27 	.globl _P
                                     28 	.globl _PS
                                     29 	.globl _PT1
                                     30 	.globl _PX1
                                     31 	.globl _PT0
                                     32 	.globl _PX0
                                     33 	.globl _RD
                                     34 	.globl _WR
                                     35 	.globl _T1
                                     36 	.globl _T0
                                     37 	.globl _INT1
                                     38 	.globl _INT0
                                     39 	.globl _TXD
                                     40 	.globl _RXD
                                     41 	.globl _P3_7
                                     42 	.globl _P3_6
                                     43 	.globl _P3_5
                                     44 	.globl _P3_4
                                     45 	.globl _P3_3
                                     46 	.globl _P3_2
                                     47 	.globl _P3_1
                                     48 	.globl _P3_0
                                     49 	.globl _EA
                                     50 	.globl _ES
                                     51 	.globl _ET1
                                     52 	.globl _EX1
                                     53 	.globl _ET0
                                     54 	.globl _EX0
                                     55 	.globl _P2_7
                                     56 	.globl _P2_6
                                     57 	.globl _P2_5
                                     58 	.globl _P2_4
                                     59 	.globl _P2_3
                                     60 	.globl _P2_2
                                     61 	.globl _P2_1
                                     62 	.globl _P2_0
                                     63 	.globl _SM0
                                     64 	.globl _SM1
                                     65 	.globl _SM2
                                     66 	.globl _REN
                                     67 	.globl _TB8
                                     68 	.globl _RB8
                                     69 	.globl _TI
                                     70 	.globl _RI
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _TF1
                                     80 	.globl _TR1
                                     81 	.globl _TF0
                                     82 	.globl _TR0
                                     83 	.globl _IE1
                                     84 	.globl _IT1
                                     85 	.globl _IE0
                                     86 	.globl _IT0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _B
                                     96 	.globl _ACC
                                     97 	.globl _PSW
                                     98 	.globl _IP
                                     99 	.globl _P3
                                    100 	.globl _IE
                                    101 	.globl _P2
                                    102 	.globl _SBUF
                                    103 	.globl _SCON
                                    104 	.globl _P1
                                    105 	.globl _TH1
                                    106 	.globl _TH0
                                    107 	.globl _TL1
                                    108 	.globl _TL0
                                    109 	.globl _TMOD
                                    110 	.globl _TCON
                                    111 	.globl _PCON
                                    112 	.globl _DPH
                                    113 	.globl _DPL
                                    114 	.globl _SP
                                    115 	.globl _P0
                                    116 	.globl _count
                                    117 ;--------------------------------------------------------
                                    118 ; special function registers
                                    119 ;--------------------------------------------------------
                                    120 	.area RSEG    (ABS,DATA)
      000000                        121 	.org 0x0000
                           000080   122 _P0	=	0x0080
                           000081   123 _SP	=	0x0081
                           000082   124 _DPL	=	0x0082
                           000083   125 _DPH	=	0x0083
                           000087   126 _PCON	=	0x0087
                           000088   127 _TCON	=	0x0088
                           000089   128 _TMOD	=	0x0089
                           00008A   129 _TL0	=	0x008a
                           00008B   130 _TL1	=	0x008b
                           00008C   131 _TH0	=	0x008c
                           00008D   132 _TH1	=	0x008d
                           000090   133 _P1	=	0x0090
                           000098   134 _SCON	=	0x0098
                           000099   135 _SBUF	=	0x0099
                           0000A0   136 _P2	=	0x00a0
                           0000A8   137 _IE	=	0x00a8
                           0000B0   138 _P3	=	0x00b0
                           0000B8   139 _IP	=	0x00b8
                           0000D0   140 _PSW	=	0x00d0
                           0000E0   141 _ACC	=	0x00e0
                           0000F0   142 _B	=	0x00f0
                                    143 ;--------------------------------------------------------
                                    144 ; special function bits
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0_0	=	0x0080
                           000081   149 _P0_1	=	0x0081
                           000082   150 _P0_2	=	0x0082
                           000083   151 _P0_3	=	0x0083
                           000084   152 _P0_4	=	0x0084
                           000085   153 _P0_5	=	0x0085
                           000086   154 _P0_6	=	0x0086
                           000087   155 _P0_7	=	0x0087
                           000088   156 _IT0	=	0x0088
                           000089   157 _IE0	=	0x0089
                           00008A   158 _IT1	=	0x008a
                           00008B   159 _IE1	=	0x008b
                           00008C   160 _TR0	=	0x008c
                           00008D   161 _TF0	=	0x008d
                           00008E   162 _TR1	=	0x008e
                           00008F   163 _TF1	=	0x008f
                           000090   164 _P1_0	=	0x0090
                           000091   165 _P1_1	=	0x0091
                           000092   166 _P1_2	=	0x0092
                           000093   167 _P1_3	=	0x0093
                           000094   168 _P1_4	=	0x0094
                           000095   169 _P1_5	=	0x0095
                           000096   170 _P1_6	=	0x0096
                           000097   171 _P1_7	=	0x0097
                           000098   172 _RI	=	0x0098
                           000099   173 _TI	=	0x0099
                           00009A   174 _RB8	=	0x009a
                           00009B   175 _TB8	=	0x009b
                           00009C   176 _REN	=	0x009c
                           00009D   177 _SM2	=	0x009d
                           00009E   178 _SM1	=	0x009e
                           00009F   179 _SM0	=	0x009f
                           0000A0   180 _P2_0	=	0x00a0
                           0000A1   181 _P2_1	=	0x00a1
                           0000A2   182 _P2_2	=	0x00a2
                           0000A3   183 _P2_3	=	0x00a3
                           0000A4   184 _P2_4	=	0x00a4
                           0000A5   185 _P2_5	=	0x00a5
                           0000A6   186 _P2_6	=	0x00a6
                           0000A7   187 _P2_7	=	0x00a7
                           0000A8   188 _EX0	=	0x00a8
                           0000A9   189 _ET0	=	0x00a9
                           0000AA   190 _EX1	=	0x00aa
                           0000AB   191 _ET1	=	0x00ab
                           0000AC   192 _ES	=	0x00ac
                           0000AF   193 _EA	=	0x00af
                           0000B0   194 _P3_0	=	0x00b0
                           0000B1   195 _P3_1	=	0x00b1
                           0000B2   196 _P3_2	=	0x00b2
                           0000B3   197 _P3_3	=	0x00b3
                           0000B4   198 _P3_4	=	0x00b4
                           0000B5   199 _P3_5	=	0x00b5
                           0000B6   200 _P3_6	=	0x00b6
                           0000B7   201 _P3_7	=	0x00b7
                           0000B0   202 _RXD	=	0x00b0
                           0000B1   203 _TXD	=	0x00b1
                           0000B2   204 _INT0	=	0x00b2
                           0000B3   205 _INT1	=	0x00b3
                           0000B4   206 _T0	=	0x00b4
                           0000B5   207 _T1	=	0x00b5
                           0000B6   208 _WR	=	0x00b6
                           0000B7   209 _RD	=	0x00b7
                           0000B8   210 _PX0	=	0x00b8
                           0000B9   211 _PT0	=	0x00b9
                           0000BA   212 _PX1	=	0x00ba
                           0000BB   213 _PT1	=	0x00bb
                           0000BC   214 _PS	=	0x00bc
                           0000D0   215 _P	=	0x00d0
                           0000D1   216 _F1	=	0x00d1
                           0000D2   217 _OV	=	0x00d2
                           0000D3   218 _RS0	=	0x00d3
                           0000D4   219 _RS1	=	0x00d4
                           0000D5   220 _F0	=	0x00d5
                           0000D6   221 _AC	=	0x00d6
                           0000D7   222 _CY	=	0x00d7
                                    223 ;--------------------------------------------------------
                                    224 ; overlayable register banks
                                    225 ;--------------------------------------------------------
                                    226 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        227 	.ds 8
                                    228 ;--------------------------------------------------------
                                    229 ; internal ram data
                                    230 ;--------------------------------------------------------
                                    231 	.area DSEG    (DATA)
      000000                        232 _count::
      000000                        233 	.ds 2
                                    234 ;--------------------------------------------------------
                                    235 ; overlayable items in internal ram
                                    236 ;--------------------------------------------------------
                                    237 	.area	OSEG    (OVR,DATA)
                                    238 	.area	OSEG    (OVR,DATA)
                                    239 ;--------------------------------------------------------
                                    240 ; Stack segment in internal ram
                                    241 ;--------------------------------------------------------
                                    242 	.area	SSEG
      000000                        243 __start__stack:
      000000                        244 	.ds	1
                                    245 
                                    246 ;--------------------------------------------------------
                                    247 ; indirectly addressable internal ram data
                                    248 ;--------------------------------------------------------
                                    249 	.area ISEG    (DATA)
                                    250 ;--------------------------------------------------------
                                    251 ; absolute internal ram data
                                    252 ;--------------------------------------------------------
                                    253 	.area IABS    (ABS,DATA)
                                    254 	.area IABS    (ABS,DATA)
                                    255 ;--------------------------------------------------------
                                    256 ; bit data
                                    257 ;--------------------------------------------------------
                                    258 	.area BSEG    (BIT)
                                    259 ;--------------------------------------------------------
                                    260 ; paged external ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area PSEG    (PAG,XDATA)
                                    263 ;--------------------------------------------------------
                                    264 ; external ram data
                                    265 ;--------------------------------------------------------
                                    266 	.area XSEG    (XDATA)
                                    267 ;--------------------------------------------------------
                                    268 ; absolute external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area XABS    (ABS,XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; external initialized ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XISEG   (XDATA)
                                    275 	.area HOME    (CODE)
                                    276 	.area GSINIT0 (CODE)
                                    277 	.area GSINIT1 (CODE)
                                    278 	.area GSINIT2 (CODE)
                                    279 	.area GSINIT3 (CODE)
                                    280 	.area GSINIT4 (CODE)
                                    281 	.area GSINIT5 (CODE)
                                    282 	.area GSINIT  (CODE)
                                    283 	.area GSFINAL (CODE)
                                    284 	.area CSEG    (CODE)
                                    285 ;--------------------------------------------------------
                                    286 ; interrupt vector
                                    287 ;--------------------------------------------------------
                                    288 	.area HOME    (CODE)
      000000                        289 __interrupt_vect:
      000000 02r00r00         [24]  290 	ljmp	__sdcc_gsinit_startup
      000003 02r00rC1         [24]  291 	ljmp	_EXT0_Process
      000006                        292 	.ds	5
      00000B 32               [24]  293 	reti
      00000C                        294 	.ds	7
      000013 02r00rD6         [24]  295 	ljmp	_EXT1_Process
                                    296 ;--------------------------------------------------------
                                    297 ; global & static initialisations
                                    298 ;--------------------------------------------------------
                                    299 	.area HOME    (CODE)
                                    300 	.area GSINIT  (CODE)
                                    301 	.area GSFINAL (CODE)
                                    302 	.area GSINIT  (CODE)
                                    303 	.globl __sdcc_gsinit_startup
                                    304 	.globl __sdcc_program_startup
                                    305 	.globl __start__stack
                                    306 	.globl __mcs51_genXINIT
                                    307 	.globl __mcs51_genXRAMCLEAR
                                    308 	.globl __mcs51_genRAMCLEAR
                                    309 ;	main.c:10: int count = 0;
      000000 E4               [12]  310 	clr	a
      000001 F5*00            [12]  311 	mov	_count,a
      000003 F5*01            [12]  312 	mov	(_count + 1),a
                                    313 	.area GSFINAL (CODE)
      000000 02r00r16         [24]  314 	ljmp	__sdcc_program_startup
                                    315 ;--------------------------------------------------------
                                    316 ; Home
                                    317 ;--------------------------------------------------------
                                    318 	.area HOME    (CODE)
                                    319 	.area HOME    (CODE)
      000016                        320 __sdcc_program_startup:
      000016 02r00rEC         [24]  321 	ljmp	_main
                                    322 ;	return from main will return to caller
                                    323 ;--------------------------------------------------------
                                    324 ; code
                                    325 ;--------------------------------------------------------
                                    326 	.area CSEG    (CODE)
                                    327 ;------------------------------------------------------------
                                    328 ;Allocation info for local variables in function 'delay'
                                    329 ;------------------------------------------------------------
                                    330 ;ms                        Allocated to registers r6 r7 
                                    331 ;i                         Allocated to registers r4 r5 
                                    332 ;j                         Allocated to registers r2 r3 
                                    333 ;------------------------------------------------------------
                                    334 ;	main.c:11: void delay(int ms){
                                    335 ;	-----------------------------------------
                                    336 ;	 function delay
                                    337 ;	-----------------------------------------
      000000                        338 _delay:
                           000007   339 	ar7 = 0x07
                           000006   340 	ar6 = 0x06
                           000005   341 	ar5 = 0x05
                           000004   342 	ar4 = 0x04
                           000003   343 	ar3 = 0x03
                           000002   344 	ar2 = 0x02
                           000001   345 	ar1 = 0x01
                           000000   346 	ar0 = 0x00
      000000 AE 82            [24]  347 	mov	r6,dpl
      000002 AF 83            [24]  348 	mov	r7,dph
                                    349 ;	main.c:13: for(i =0;i<60;i++){
      000004 7C 00            [12]  350 	mov	r4,#0x00
      000006 7D 00            [12]  351 	mov	r5,#0x00
                                    352 ;	main.c:14: for(j = 0;j<ms;j++);
      000008                        353 00111$:
      000008 7A 00            [12]  354 	mov	r2,#0x00
      00000A 7B 00            [12]  355 	mov	r3,#0x00
      00000C                        356 00104$:
      00000C C3               [12]  357 	clr	c
      00000D EA               [12]  358 	mov	a,r2
      00000E 9E               [12]  359 	subb	a,r6
      00000F EB               [12]  360 	mov	a,r3
      000010 64 80            [12]  361 	xrl	a,#0x80
      000012 8F F0            [24]  362 	mov	b,r7
      000014 63 F0 80         [24]  363 	xrl	b,#0x80
      000017 95 F0            [12]  364 	subb	a,b
      000019 50 07            [24]  365 	jnc	00107$
      00001B 0A               [12]  366 	inc	r2
      00001C BA 00 ED         [24]  367 	cjne	r2,#0x00,00104$
      00001F 0B               [12]  368 	inc	r3
      000020 80 EA            [24]  369 	sjmp	00104$
      000022                        370 00107$:
                                    371 ;	main.c:13: for(i =0;i<60;i++){
      000022 0C               [12]  372 	inc	r4
      000023 BC 00 01         [24]  373 	cjne	r4,#0x00,00126$
      000026 0D               [12]  374 	inc	r5
      000027                        375 00126$:
      000027 C3               [12]  376 	clr	c
      000028 EC               [12]  377 	mov	a,r4
      000029 94 3C            [12]  378 	subb	a,#0x3c
      00002B ED               [12]  379 	mov	a,r5
      00002C 64 80            [12]  380 	xrl	a,#0x80
      00002E 94 80            [12]  381 	subb	a,#0x80
      000030 40 D6            [24]  382 	jc	00111$
                                    383 ;	main.c:16: }
      000032 22               [24]  384 	ret
                                    385 ;------------------------------------------------------------
                                    386 ;Allocation info for local variables in function 'init'
                                    387 ;------------------------------------------------------------
                                    388 ;	main.c:17: void init(){
                                    389 ;	-----------------------------------------
                                    390 ;	 function init
                                    391 ;	-----------------------------------------
      000033                        392 _init:
                                    393 ;	main.c:18: P3_0 = 1;
                                    394 ;	assignBit
      000033 D2 B0            [12]  395 	setb	_P3_0
                                    396 ;	main.c:19: EX0 = 1;
                                    397 ;	assignBit
      000035 D2 A8            [12]  398 	setb	_EX0
                                    399 ;	main.c:20: IT0 = 1;
                                    400 ;	assignBit
      000037 D2 88            [12]  401 	setb	_IT0
                                    402 ;	main.c:22: P3_3 = 1;
                                    403 ;	assignBit
      000039 D2 B3            [12]  404 	setb	_P3_3
                                    405 ;	main.c:23: EX1 = 1;
                                    406 ;	assignBit
      00003B D2 AA            [12]  407 	setb	_EX1
                                    408 ;	main.c:24: IT1 = 1;
                                    409 ;	assignBit
      00003D D2 8A            [12]  410 	setb	_IT1
                                    411 ;	main.c:25: EA = 1;
                                    412 ;	assignBit
      00003F D2 AF            [12]  413 	setb	_EA
                                    414 ;	main.c:26: }
      000041 22               [24]  415 	ret
                                    416 ;------------------------------------------------------------
                                    417 ;Allocation info for local variables in function 'output_7seg_off'
                                    418 ;------------------------------------------------------------
                                    419 ;	main.c:31: void output_7seg_off()
                                    420 ;	-----------------------------------------
                                    421 ;	 function output_7seg_off
                                    422 ;	-----------------------------------------
      000042                        423 _output_7seg_off:
                                    424 ;	main.c:33: P0 = 0x00;
      000042 75 80 00         [24]  425 	mov	_P0,#0x00
                                    426 ;	main.c:34: }
      000045 22               [24]  427 	ret
                                    428 ;------------------------------------------------------------
                                    429 ;Allocation info for local variables in function 'output_7seg'
                                    430 ;------------------------------------------------------------
                                    431 ;value                     Allocated to registers r7 
                                    432 ;------------------------------------------------------------
                                    433 ;	main.c:35: void output_7seg(unsigned char value)
                                    434 ;	-----------------------------------------
                                    435 ;	 function output_7seg
                                    436 ;	-----------------------------------------
      000046                        437 _output_7seg:
      000046 AF 82            [24]  438 	mov	r7,dpl
                                    439 ;	main.c:37: if (value < 10){
      000048 BF 0A 00         [24]  440 	cjne	r7,#0x0a,00109$
      00004B                        441 00109$:
      00004B 50 07            [24]  442 	jnc	00103$
                                    443 ;	main.c:38: P0 = mask [value];
      00004D EF               [12]  444 	mov	a,r7
      00004E 90r00r00         [24]  445 	mov	dptr,#_mask
      000051 93               [24]  446 	movc	a,@a+dptr
      000052 F5 80            [12]  447 	mov	_P0,a
      000054                        448 00103$:
                                    449 ;	main.c:40: }
      000054 22               [24]  450 	ret
                                    451 ;------------------------------------------------------------
                                    452 ;Allocation info for local variables in function 'display_number'
                                    453 ;------------------------------------------------------------
                                    454 ;iNum                      Allocated to registers r7 
                                    455 ;i                         Allocated to registers r6 
                                    456 ;temp                      Allocated to registers r2 
                                    457 ;------------------------------------------------------------
                                    458 ;	main.c:42: void display_number(unsigned char iNum){
                                    459 ;	-----------------------------------------
                                    460 ;	 function display_number
                                    461 ;	-----------------------------------------
      000055                        462 _display_number:
      000055 AF 82            [24]  463 	mov	r7,dpl
                                    464 ;	main.c:45: for (i = 0;i<3;i++){
      000057 7E 00            [12]  465 	mov	r6,#0x00
      000059                        466 00102$:
                                    467 ;	main.c:46: temp = iNum%10;
      000059 8F 04            [24]  468 	mov	ar4,r7
      00005B 7D 00            [12]  469 	mov	r5,#0x00
      00005D 75*00 0A         [24]  470 	mov	__modsint_PARM_2,#0x0a
                                    471 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000060 8D*01            [24]  472 	mov	(__modsint_PARM_2 + 1),r5
      000062 8C 82            [24]  473 	mov	dpl,r4
      000064 8D 83            [24]  474 	mov	dph,r5
      000066 C0 06            [24]  475 	push	ar6
      000068 C0 05            [24]  476 	push	ar5
      00006A C0 04            [24]  477 	push	ar4
      00006C 12r00r00         [24]  478 	lcall	__modsint
      00006F AA 82            [24]  479 	mov	r2,dpl
      000071 D0 04            [24]  480 	pop	ar4
      000073 D0 05            [24]  481 	pop	ar5
                                    482 ;	main.c:47: iNum = iNum /10;
      000075 75*00 0A         [24]  483 	mov	__divsint_PARM_2,#0x0a
      000078 75*01 00         [24]  484 	mov	(__divsint_PARM_2 + 1),#0x00
      00007B 8C 82            [24]  485 	mov	dpl,r4
      00007D 8D 83            [24]  486 	mov	dph,r5
      00007F C0 02            [24]  487 	push	ar2
      000081 12r00r00         [24]  488 	lcall	__divsint
      000084 AC 82            [24]  489 	mov	r4,dpl
      000086 D0 02            [24]  490 	pop	ar2
      000088 D0 06            [24]  491 	pop	ar6
      00008A 8C 07            [24]  492 	mov	ar7,r4
                                    493 ;	main.c:49: LED7SEG_ADDR0 = i&0x01;
      00008C EE               [12]  494 	mov	a,r6
      00008D 54 01            [12]  495 	anl	a,#0x01
                                    496 ;	assignBit
      00008F 24 FF            [12]  497 	add	a,#0xff
      000091 92 A2            [24]  498 	mov	_P2_2,c
                                    499 ;	main.c:50: LED7SEG_ADDR1 = i&0x02;
      000093 EE               [12]  500 	mov	a,r6
      000094 03               [12]  501 	rr	a
      000095 54 01            [12]  502 	anl	a,#0x01
                                    503 ;	assignBit
      000097 24 FF            [12]  504 	add	a,#0xff
      000099 92 A3            [24]  505 	mov	_P2_3,c
                                    506 ;	main.c:51: LED7SEG_ADDR2 = i&0x04;
      00009B EE               [12]  507 	mov	a,r6
      00009C 03               [12]  508 	rr	a
      00009D 03               [12]  509 	rr	a
      00009E 54 01            [12]  510 	anl	a,#0x01
                                    511 ;	assignBit
      0000A0 24 FF            [12]  512 	add	a,#0xff
      0000A2 92 A4            [24]  513 	mov	_P2_4,c
                                    514 ;	main.c:53: output_7seg(temp);
      0000A4 8A 82            [24]  515 	mov	dpl,r2
      0000A6 C0 07            [24]  516 	push	ar7
      0000A8 C0 06            [24]  517 	push	ar6
      0000AA 12r00r46         [24]  518 	lcall	_output_7seg
                                    519 ;	main.c:55: delay(1);
      0000AD 90 00 01         [24]  520 	mov	dptr,#0x0001
      0000B0 12r00r00         [24]  521 	lcall	_delay
                                    522 ;	main.c:56: output_7seg_off();
      0000B3 12r00r42         [24]  523 	lcall	_output_7seg_off
      0000B6 D0 06            [24]  524 	pop	ar6
      0000B8 D0 07            [24]  525 	pop	ar7
                                    526 ;	main.c:45: for (i = 0;i<3;i++){
      0000BA 0E               [12]  527 	inc	r6
      0000BB BE 03 00         [24]  528 	cjne	r6,#0x03,00111$
      0000BE                        529 00111$:
      0000BE 40 99            [24]  530 	jc	00102$
                                    531 ;	main.c:58: }
      0000C0 22               [24]  532 	ret
                                    533 ;------------------------------------------------------------
                                    534 ;Allocation info for local variables in function 'EXT0_Process'
                                    535 ;------------------------------------------------------------
                                    536 ;	main.c:60: void EXT0_Process() __interrupt IE0_VECTOR
                                    537 ;	-----------------------------------------
                                    538 ;	 function EXT0_Process
                                    539 ;	-----------------------------------------
      0000C1                        540 _EXT0_Process:
      0000C1 C0 E0            [24]  541 	push	acc
      0000C3 C0 D0            [24]  542 	push	psw
                                    543 ;	main.c:62: EA = 0;
                                    544 ;	assignBit
      0000C5 C2 AF            [12]  545 	clr	_EA
                                    546 ;	main.c:63: count++;
      0000C7 05*00            [12]  547 	inc	_count
      0000C9 E4               [12]  548 	clr	a
      0000CA B5*00 02         [24]  549 	cjne	a,_count,00103$
      0000CD 05*01            [12]  550 	inc	(_count + 1)
      0000CF                        551 00103$:
                                    552 ;	main.c:64: EA = 1;
                                    553 ;	assignBit
      0000CF D2 AF            [12]  554 	setb	_EA
                                    555 ;	main.c:65: }
      0000D1 D0 D0            [24]  556 	pop	psw
      0000D3 D0 E0            [24]  557 	pop	acc
      0000D5 32               [24]  558 	reti
                                    559 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    560 ;	eliminated unneeded push/pop dpl
                                    561 ;	eliminated unneeded push/pop dph
                                    562 ;	eliminated unneeded push/pop b
                                    563 ;------------------------------------------------------------
                                    564 ;Allocation info for local variables in function 'EXT1_Process'
                                    565 ;------------------------------------------------------------
                                    566 ;	main.c:67: void EXT1_Process() __interrupt IE1_VECTOR
                                    567 ;	-----------------------------------------
                                    568 ;	 function EXT1_Process
                                    569 ;	-----------------------------------------
      0000D6                        570 _EXT1_Process:
      0000D6 C0 E0            [24]  571 	push	acc
      0000D8 C0 D0            [24]  572 	push	psw
                                    573 ;	main.c:69: EA = 0;
                                    574 ;	assignBit
      0000DA C2 AF            [12]  575 	clr	_EA
                                    576 ;	main.c:70: count--;
      0000DC 15*00            [12]  577 	dec	_count
      0000DE 74 FF            [12]  578 	mov	a,#0xff
      0000E0 B5*00 02         [24]  579 	cjne	a,_count,00103$
      0000E3 15*01            [12]  580 	dec	(_count + 1)
      0000E5                        581 00103$:
                                    582 ;	main.c:71: EA = 1;
                                    583 ;	assignBit
      0000E5 D2 AF            [12]  584 	setb	_EA
                                    585 ;	main.c:72: }
      0000E7 D0 D0            [24]  586 	pop	psw
      0000E9 D0 E0            [24]  587 	pop	acc
      0000EB 32               [24]  588 	reti
                                    589 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    590 ;	eliminated unneeded push/pop dpl
                                    591 ;	eliminated unneeded push/pop dph
                                    592 ;	eliminated unneeded push/pop b
                                    593 ;------------------------------------------------------------
                                    594 ;Allocation info for local variables in function 'main'
                                    595 ;------------------------------------------------------------
                                    596 ;	main.c:75: void main(void)
                                    597 ;	-----------------------------------------
                                    598 ;	 function main
                                    599 ;	-----------------------------------------
      0000EC                        600 _main:
                                    601 ;	main.c:78: init();
      0000EC 12r00r33         [24]  602 	lcall	_init
                                    603 ;	main.c:80: while(1){
      0000EF                        604 00102$:
                                    605 ;	main.c:81: display_number(count);
      0000EF 85*00 82         [24]  606 	mov	dpl,_count
      0000F2 12r00r55         [24]  607 	lcall	_display_number
                                    608 ;	main.c:85: }
      0000F5 80 F8            [24]  609 	sjmp	00102$
                                    610 	.area CSEG    (CODE)
                                    611 	.area CONST   (CODE)
      000000                        612 _mask:
      000000 3F                     613 	.db #0x3f	; 63
      000001 06                     614 	.db #0x06	; 6
      000002 5B                     615 	.db #0x5b	; 91
      000003 4F                     616 	.db #0x4f	; 79	'O'
      000004 66                     617 	.db #0x66	; 102	'f'
      000005 6D                     618 	.db #0x6d	; 109	'm'
      000006 7D                     619 	.db #0x7d	; 125
      000007 07                     620 	.db #0x07	; 7
      000008 7F                     621 	.db #0x7f	; 127
      000009 6F                     622 	.db #0x6f	; 111	'o'
                                    623 	.area XINIT   (CODE)
                                    624 	.area CABS    (ABS,CODE)
